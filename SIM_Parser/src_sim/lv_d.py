import glob as gb
import os
import warnings
import pandas as pd
import xlwings as xw # Xlwings is a Python library that makes it easy to call Python from Excel
# used to filter out warning messages generated by modules or functions called in code.
warnings.filterwarnings("ignore")

# function get LVD report based on specific criteria
def get_LVD_report(name):
    try:
        # Open the file named 'name' and read its contents
        with open(name) as f:
            # Read all lines from the file and store them in a list named flist
            flist = f.readlines()
            
            # Initialize an empty list to store line numbers where 'LV-D' occurs
            lvd_count = [] 
            # Iterate through each line in flist along with its line number
            for num, line in enumerate(flist, 0):
                # If 'LV-D' is in the line, append its line number to lvd_count list
                if 'LV-D' in line:
                    lvd_count.append(num)
                # If 'LV-E' is in the line, store its line number as numend
                if 'LV-E' in line:
                    numend = num
            # Store the line number of the first occurrence of 'LV-B'
            numstart = lvd_count[0] 
             # Slice flist from the start of 'LV-D' to the line before 'LV-E' and store it in lvd_rpt
            lvd_rpt = flist[numstart:numend]
            
            # create two lists lvd_str and space to store lines between LV-D and LV-E 
            lvd_str = []
            space = [] # space list to store space type
            # iterate in each line of lvd_rpt
            for line in lvd_rpt:
                # condition for each line to get the specific rows
                if ('NORTH' in line  or 'SOUTH' in line or 'NORTH-EAST' in line or 'EAST' in line
                    or 'NORTH-WEST' in line  or 'SOUTH-WEST' in line or 'SOUTH-EAST' in line or 'WEST' in line
                    or "ROOF" in line or 'UNDERGRND' in line):
                    lvd_str.append(line)
                # condition to store line which contains 'in space'
                elif ('in space:' in line):
                    space.append(line)
            
            # result list to store filtered columns. after 7th column from last remaining values in 1 column. 
            result = []  
            for line in lvd_str:
                lvd_list = []
                # Split the line by whitespace and store the result in splitter
                splitter = line.split()
                 # Join the first part of the splitter except the last 7 elements and store it as space_name
                space_name = " ".join(splitter[:-7])
                # Add space_name as the first element of lvd_list
                lvd_list=splitter[-7:]
                lvd_list.insert(0,space_name)
                # Append lvd_list to result
                result.append(lvd_list)
            
            # stores result list to dataframe as lvd_df
            lvd_df = pd.DataFrame(result) 
            # Allot lvd_df columns from sim file
            lvd_df.columns = ['SURFACE', 'U-VALUE_Window(BTU/HR-SQFT-F)', 'AREA_Window(SQFT)', 'U-VALUE_Wall(BTU/HR-SQFT-F)',
                                'AREA_Wall(SQFT)', 'U-VALUE_Wall_Wind(BTU/HR-SQFT-F)', 'AREA_Wall_Wind(SQFT)', 'AZIMUTH']
            # drop that rows in lvd_df if AZIMUTH column in numeric values.
            lvd_df = lvd_df[~pd.to_numeric(lvd_df['AZIMUTH'], errors='coerce').notna()]
            Azi = lvd_df['AZIMUTH'].to_list()
            # list to add new column in lvd_df dataframe
            Grade_Express = []
            for azimuth in Azi:
                if azimuth == 'UNDERGRND':
                    Grade_Express.append('BG')
                else:
                    Grade_Express.append('AG')
            # adding new column in lvd_df report as- Grade-Expression
            lvd_df['Grade-Expression'] = Grade_Express
            
            # while len of space list is less, append azimuth
            while len(space) < len(Azi):
                space.append(Azi)
            # while len of space list is more, append space
            while len(Azi) < len(space):
                Azi.append(space)
            # put it into space_df dataframe
            space_df = pd.DataFrame({'AZIMUTH_': Azi, 'SPACE': space})
            # adding new column as space in lvd_df
            lvd_df = pd.concat([lvd_df, space_df], axis=1)
            # replace new line of last column as ''
            lvd_df[lvd_df.columns[-1]] = lvd_df[lvd_df.columns[-1]].str.replace('\n', '')
    
            # Set the index name of lvb_df to name
            lvd_df.index.name = name
            # Extract the filename from the path and store it in name
            value_before_backslash = ''.join(reversed(name)).split("\\")[0]
            name1 = ''.join(reversed(value_before_backslash))
            # take the value before '.'
            name = name1.rsplit(".", 1)[0]
            # Insert a new column named 'RUNNAME' containing the filename
            lvd_df.insert(0, 'RUNNAME', name) 
            lvd_df = lvd_df.drop(columns=[lvd_df.columns[-2]])
            indices_to_delete = lvd_df[~lvd_df.iloc[:, -2].isin(['BG', 'AG'])].index
            lvd_df = lvd_df.drop(indices_to_delete)
            last_col = lvd_df.pop(lvd_df.columns[-1])
            lvd_df.insert(2, last_col.name, last_col)
            # in each row of 'SPACE' column ignore 'in space: ' string.
            lvd_df['SPACE'] = lvd_df['SPACE'].str.replace('in space: ','')
            
        return lvd_df
    except Exception as e:
        print(f"An error occurred: {e}")
        columns = ['SURFACE', 'U-VALUE_Window(BTU/HR-SQFT-F)', 'AREA_Window(SQFT)', 'U-VALUE_Wall(BTU/HR-SQFT-F)',
                    'AREA_Wall(SQFT)', 'U-VALUE_Wall_Wind(BTU/HR-SQFT-F)', 'AREA_Wall_Wind(SQFT)', 'AZIMUTH']
        return pd.DataFrame(columns=columns)
