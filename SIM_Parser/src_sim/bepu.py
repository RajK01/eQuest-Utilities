import glob as gb
import os
import warnings
import pandas as pd
import xlwings as xw # Xlwings is a Python library that makes it easy to call Python from Excel
# used to filter out warning messages generated by modules or functions called in your code.
warnings.filterwarnings("ignore")

# function to get bepu report in csv format based on conditions and allot them with columns from sim file.
# First the report is in string format, it is converted into the lists and then dataframe to print csvs
def get_BEPU_report(name):
    # Open the file named 'name' and read its contents
    try:
        with open(name) as f:
            # Read all lines from the file and store them in a list named flist
            flist = f.readlines()
    
            # initialize an empty list to store line from BEPU occur till TOTAL start.
            bepu_count = [] 
            # Iterate through each line in flist along with its line number
            for num, line in enumerate(flist, 0):
                 # If 'BEPU' is in the line, append its line number to bepu_count list
                if 'BEPU' in line:
                    bepu_count.append(num)
                 # If 'TOTAL' is in the line, store its line number as numend
                if 'TOTAL' in line:
                    numend = num
            # Store the line number of the first occurance of BEPU
            numstart = bepu_count[0] 
             # Slice flist from the start of 'BEPU' to the line before 'TOTAL' and store it in beps_rpt
            bepu_rpt = flist[numstart:numend]
    
            bepu_str = []  # List to store lines containing 'MBTU'
            other_str = []  # List to store lines preceding the 'MBTU' lines
            prev_line = None  # Initialize variable to store the previous line
            for line in bepu_rpt:
                if prev_line:
                    if ('.' in line and 'TOTAL' not in line):
                        bepu_str.append(line)  # Append the current line
                        other_str.append(prev_line)  # Store the previous line
                # Store the current line as the previous line for the next iteration
                prev_line = line
            
            # this list will store the bepu_list   
            result = [] 
            # Iterate through each line in bepu_rpt
            for line in bepu_str:
                bepu_list = []
                # Split the line by whitespace and store the result in splitter
                splitter = line.split()
                # Join the first part of the splitter except the last 13 elements and store it as space_name
                space_name = " ".join(splitter[:-13])
                # Add space_name as the first element of bepu_list
                bepu_list=splitter[-13:]
                # Add space_name as the first element of bepu_list
                bepu_list.insert(0,space_name)
                # append bepu_list to result
                result.append(bepu_list)
            # store result to dataframe
            bepu_df = pd.DataFrame(result)
    
            # this list is to stores the previous line of beps source in other_result list. It will be added in
            # 1st column of the dataframe.
            other_result = []
            # iterate in other_str for each line and store other_list []
            for line in other_str:
                other_list = []
                splitter = line.split()
                # we have only 1 column. store in a list for one column.
                space_name = " ".join(splitter[:1])
                other_list=splitter[1:]
                # insert space_name as the first column of bepu_df
                other_list.insert(0,space_name)
                # append other_list to other_result list.
                other_result.append(other_list)
            # store other_result to dataframe
            other_df = pd.DataFrame(other_result)
            
            # consider the values which are not none
            merged_column = other_df.apply(lambda x: ' '.join(str(val) for val in x if val is not None), axis=1)
            other_df = pd.DataFrame({'': merged_column})
            # adding other_df and bepu_df into 1 dataframe.
            bepu_df = pd.concat([other_df, bepu_df], axis=1)
    
            # alloting columns name to each columns
            bepu_df.columns = ['BEPU-SOURCE', 'BEPU-UNIT', 'LIGHTS', 'TASK-LIGHTS', 'MISQ-EQUIP', 'SPACE-HEATING',
                                'SPACE-COOLING', 'HEAT-REJECT', 'PUMPS & AUX', 'VENT FANS', 'REFRING-DISPLAY',
                                'HT-PUMP-SUPPLEMENT', 'DOMEST-HOT-WTR', 'EXT-USAGE', 'TOTAL']
            # take that rows in 'BEPU-UNIT' which contains '.' and ''
            bepu_df = bepu_df[bepu_df['BEPU-UNIT'].str.contains(r'\b.\b|\b\b')]
            # take that rows in 'BEPU-SOURCE' which contains '.' and ''
            bepu_df = bepu_df[bepu_df['BEPU-SOURCE'].str.contains(r'\b.\b|\b\b')]
            # take that rows in 'BEPU-UNIT' which does not contains '.' and ''
            bepu_df = bepu_df[~bepu_df['BEPU-UNIT'].str.contains(r'\.|^\d+$')]
            bepu_df = bepu_df[~bepu_df['BEPU-SOURCE'].str.contains(r'\.|^\d+$')]
            # take that rows in 'LIGHTS' which contains ':' and ''
            bepu_df = bepu_df[~bepu_df['LIGHTS'].str.contains(r'\:|^\d+$')]
    
            # alloting columns name to each columns
            bepu_df.columns = ['BEPU-SOURCE', 'BEPU-UNIT', 'LIGHTS', 'TASK-LIGHTS', 'MISQ-EQUIP', 'SPACE-HEATING',
                                'SPACE-COOLING', 'HEAT-REJECT', 'PUMPS & AUX', 'VENT FANS', 'REFRING-DISPLAY',
                                'HT-PUMP-SUPPLEMENT', 'DOMEST-HOT-WTR', 'EXT-USAGE', 'TOTAL']
            
            # sets the name of the index of the DataFrame bepu_df to the value stored in the variable name.
            bepu_df.index.name = name
            # reverse the path, and store value before 1st backslash occur.
            value_before_backslash = ''.join(reversed(name)).split("\\")[0]
            # after reverse store into a variable
            name1 = ''.join(reversed(value_before_backslash))
            # take the value before '.' as 1st column values.
            name = name1.rsplit(".", 1)[0]
            # insert name as column name 'RUNNAME'
            # bepu_df.insert(0, 'RUNNAME', name)
            
            return bepu_df
    except Exception as e:
        print(f"An error occurred: {e}")
        columns = ['BEPU-SOURCE', 'BEPU-UNIT', 'LIGHTS', 'TASK-LIGHTS', 'MISQ-EQUIP', 'SPACE-HEATING',
                                'SPACE-COOLING', 'HEAT-REJECT', 'PUMPS & AUX', 'VENT FANS', 'REFRING-DISPLAY',
                                'HT-PUMP-SUPPLEMENT', 'DOMEST-HOT-WTR', 'EXT-USAGE', 'TOTAL']
        return pd.DataFrame(columns=columns)
