import glob as gb
import os
import warnings
import pandas as pd
import xlwings as xw # Xlwings is a Python library that makes it easy to call Python from Excel
# used to filter out warning messages generated by modules or functions called in code.
warnings.filterwarnings("ignore")

# function get LSC report based on specific criteria
def get_LSC_report(name):
    try:
        # Open the file named 'name' and read its contents
        with open(name) as f:
            # Read all lines from the file and store them in a list named flist
            flist = f.readlines()
            
            # Initialize an empty list to store line numbers where 'LS-C' occurs
            lsc_count = [] 
            for num, line in enumerate(flist, 0):
                # start the line where LS-C occur.
                if 'LS-C' in line:
                    lsc_count.append(num)
                # till LS-D encounter.
                if 'LS-D' in line:
                    numend = num
            # start from 1 line of LS-C report.
            numstart = lsc_count[0] 
            # lsc_rpt is now from LS-C to LS-D lines
            lsc_rpt = flist[numstart:numend]
    
            # create empty list to store the string into list format.
            lsc_str = []
            space = []
            # move in each line of lsc_rpt based on condition and store in lsc_str list
            for line in lsc_rpt:
                if ('.' in line and 'WALL CONDUCTION' in line or 'ROOF CONDUCTION' in line or
                    'WINDOW GLASS+FRM COND' in line or 'WINDOW GLASS SOLAR' in line or 'DOOR CONDUCTION' in line or
                    'INTERNAL SURFACE COND' in line or 'UNDERGROUND SURF COND' in line or 'OCCUPANTS TO SPACE' in line
                    or 'LIGHT     TO SPACE' in line or 'EQUIPMENT TO SPACE' in line or 'PROCESS   TO SPACE'
                    in line or 'INFILTRATION' in line or 'TOTAL' in line and '/' not in line):
                    lsc_str.append(line)
            
            # result list to store filtered columns. after 7th column from last remaining values in 1 column. 
            result = []  
            for line in lsc_str:
                lsc_list = []
                # Split the line by whitespace and store the result in splitter
                splitter = line.split()
                # Join the first part of the splitter except the last 7 elements and store it as space_name
                space_name = " ".join(splitter[:-6])
                # Add space_name as the first element of lvd_list
                lsc_list=splitter[-6:]
                lsc_list.insert(0,space_name)
                # Append lvd_list to result
                result.append(lsc_list)
            
            # store lsc report in a dataframe
            lsc_df = pd.DataFrame(result)
            # drop 2st, 4th, 6th and 7th column
            lsc_df.drop(lsc_df.columns[[1, 3, 5, 6]], axis=1, inplace=True)
            # converting numbers to float.
            lsc_df.iloc[:, -2:] = lsc_df.iloc[:, -2:].apply(pd.to_numeric, errors='coerce')
    
            # Round values to two decimal places
            lsc_df.iloc[:, -2:] = lsc_df.iloc[:, -2:].applymap(lambda x: round(x, 2))
    
            # Convert to float
            lsc_df.iloc[:, -2:] = lsc_df.iloc[:, -2:].astype(float)
            # Add the values from the last two columns and store the result in the third column
            lsc_df['3rd'] = lsc_df.iloc[:, -2] + lsc_df.iloc[:, -1]
            lsc_df.drop(lsc_df.columns[[1, 2]], axis=1, inplace=True)
            lsc_df.columns = range(lsc_df.shape[1])
            # transpose the dataframe to get 1st column as header of dataframe
            lsc_df = lsc_df.T
            lsc_df.columns = lsc_df.iloc[0]
            # drop 1st row
            lsc_df = lsc_df.drop(0)
            lsc_df['LSC_UNIT'] = 'KW'
                
        return lsc_df
    except Exception as e:
        print(f"An error occurred: {e}")
        columns = ['RUNNAME', 'HEATING_CAPACITY(MBTU/HR)', 'COOLING_CAPACITY(MBTU/HR)', 'LOOP_FLOW(GAL/MIN)',
                   'TOTAL_HEAD(FT)', 'SUPPLY_UA PRODUCT(BTU/HR-F)', 'SUPPLY_LOSS_DT(F)',
                   'RETURN_UA PRODUCT(BTU/HR-F)', 'RETURN_LOSS_DT(F)', 'LOOP_VOLUME(GAL)', 'FLUID_HEAT(CAPACITY)(BTU/LB-F)']
        return pd.DataFrame()
