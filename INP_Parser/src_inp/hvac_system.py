import glob as gb
import os
import warnings
import pandas as pd
import xlwings as xw # Xlwings is a Python library that makes it easy to call Python from Excel
# used to filter out warning messages generated by modules or functions called in code.
warnings.filterwarnings("ignore")

def process_list(input_list):
    results = []
    system_encountered = False
    temp_result = []

    for item in input_list:
        if 'SYSTEM' in item and ('-SYSTEM' not in item):
            string = item
            left_part = string.split('=')[0].strip()
            if temp_result:
                temp_result.insert(0, left_part)  # Append left_part instead of 'SYSTEM'
                results.append(temp_result)
                temp_result = []
            system_encountered = True
        elif ('..' in item):
            if system_encountered:
                if temp_result:
                    temp_result.insert(0, left_part)  # Append left_part instead of 'SYSTEM'
                    results.append(temp_result)
                    temp_result = []
                system_encountered = False
        elif system_encountered:
            temp_result.append(item)

    return results

def get_HVAC_System_report(name):
    with open(name) as f:
        flist = f.readlines()
        print(name)
        # Extract lines between 'Systems / Zones' and 'Metering & Misc HVAC'
        sys_count = [num for num, line in enumerate(flist) if 'Systems / Zones' in line]
        
        numstart = sys_count[0] 
        for num, line in enumerate(flist[numstart:], start=numstart):
            if 'Metering & Misc HVAC' in line:
                numend = num
                break
        sys_rpt = flist[numstart:numend]

        # Extract lines with '=' or '..'
        sys_str = [line.strip() for line in sys_rpt if '=' in line or '..' in line]

        # Process the list to separate data
        processed_list = process_list(sys_str)

        # Define headers
        headers = ['SYSTEM-NAME']
        for sublist in processed_list:
            for item in sublist[1:]:
                header = item.split('=')[0].strip()
                if header not in headers:
                    headers.append(header)

        # Initialize dictionary to store data
        ans = {}

        # Iterate over each sublist in processed_list
        for sublist in processed_list:
            system_name = sublist[0].strip('"')
            temp_dict = {}
            for item in sublist[1:]:
                if '=' in item:
                    key, value = item.split('=')
                    key = key.strip()
                    value = value.strip()
                    temp_dict[key] = value
            ans[system_name] = temp_dict

        # Create an empty list to store the processed dictionaries
        processed_data = []

        # Iterate over the ans dictionary
        for system_name, attributes in ans.items():
            # Create a new dictionary to store the processed data for each entry
            processed_entry = {'SYSTEM-NAME': system_name}
            # Iterate over the headers to ensure correct order
            for header in headers[1:]:
                # Assign the value to the corresponding attribute name in the processed entry dictionary
                processed_entry[header] = attributes.get(header, None)
            # Append the processed entry to the list
            processed_data.append(processed_entry)

        # Create DataFrame
        sys_df = pd.DataFrame(processed_data)

    return sys_df

#######################################################################################################################

def process_list_zone(input_list):
    results = []
    system_encountered = False
    temp_result = []

    for item in input_list:
        if 'ZONE' in item and 'ZONE-' not in item:
            string = item
            left_part = string.split('=')[0].strip()
            if temp_result:
                temp_result.insert(0, left_part)  
                results.append(temp_result)
                temp_result = []
            system_encountered = True
        elif ('..' in item):
            if system_encountered:
                if temp_result:
                    temp_result.insert(0, left_part)  
                    results.append(temp_result)
                    temp_result = []
                system_encountered = False
        elif system_encountered:
            temp_result.append(item)

    return results

def get_HVAC_Zone_report(name):
    # Open the .inp file for reading
    with open(name) as f:
        # Read each line of the file
        flist = f.readlines()

        # Extract lines between 'Systems / Zones' and 'Metering & Misc HVAC'
        sys_count = [num for num, line in enumerate(flist) if 'Zones' in line]
        numstart = sys_count[0] 
        for num, line in enumerate(flist[numstart:], start=numstart):
            if 'Metering & Misc HVAC' in line:
                numend = num
                break
        sys_rpt = flist[numstart:numend]

        attached_system = []
        for line in sys_rpt:
            if 'SYSTEM' in line and '=' in line and '-SYSTEM' not in line:
                attached_system.append(line.split('=')[0].strip('"'))
        
        # Extract lines with '=' or '..'
        sys_str = [line.strip() for line in sys_rpt if '=' in line or '..' in line]

        # Ensure the process_list function is separating the data correctly
        processed_list = process_list_zone(sys_str)

        # Define headers
        headers = ['ZONE-NAME']
        for sublist in processed_list:
            for item in sublist[1:]:
                header = item.split('=')[0].strip()
                if '(' not in header and ')' not in header and header not in headers:
                    headers.append(header)

        # Initialize dictionary to store data
        ans = {}

        # Iterate over each sublist in processed_list
        for sublist in processed_list:
            zone_name = sublist[0].strip('"')
            temp_dict = {}
            for item in sublist[1:]:
                if '=' in item:
                    # Split the line by the first '=' only
                    key, value = item.split('=', 1)
                    key = key.strip()
                    value = value.strip()
                    temp_dict[key] = value
            ans[zone_name] = temp_dict

        # Create an empty list to store the processed dictionaries
        processed_data = []

        # Iterate over the ans dictionary
        for zone_name, attributes in ans.items():
            # Create a new dictionary to store the processed data for each entry
            processed_entry = {'ZONE-NAME': zone_name}
            # Iterate over the headers to ensure correct order
            for header in headers[1:]:
                # Assign the value to the corresponding attribute name in the processed entry dictionary
                processed_entry[header] = attributes.get(header, None)
            # Add SYSTEM-ATTACHED column
            processed_entry['ATTACHED-SYSTEM'] = attached_system[0]
            # Append the processed entry to the list
            processed_data.append(processed_entry)

        # Create DataFrame
        zone_df = pd.DataFrame(processed_data)

    return zone_df